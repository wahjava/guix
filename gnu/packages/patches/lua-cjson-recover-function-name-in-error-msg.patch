From 23f6b21257e31e610600c871583c577a2dc7081b Mon Sep 17 00:00:00 2001
From: Zhu Zihao <all_but_last@163.com>
Date: Mon, 30 Jun 2025 20:44:19 +0800
Subject: [PATCH] Recover the function name in error message.

---
 tests/test.lua | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/tests/test.lua b/tests/test.lua
index 2aa330e..669496d 100755
--- a/tests/test.lua
+++ b/tests/test.lua
@@ -360,28 +360,28 @@ local cjson_tests = {
     -- Function is listed as '?' due to pcall
     { "Set encode_number_precision(0) [throw error]",
       json.encode_number_precision, { 0 },
-      false, { "bad argument #1 to '?' (expected integer between 1 and 14)" } },
+      false, { "bad argument #1 to 'cjson.encode_number_precision' (expected integer between 1 and 14)" } },
     { "Set encode_number_precision(\"five\") [throw error]",
       json.encode_number_precision, { "five" },
-      false, { "bad argument #1 to '?' (number expected, got string)" } },
+      false, { "bad argument #1 to 'cjson.encode_number_precision' (number expected, got string)" } },
     { "Set encode_keep_buffer(nil, true) [throw error]",
       json.encode_keep_buffer, { nil, true },
-      false, { "bad argument #2 to '?' (found too many arguments)" } },
+      false, { "bad argument #2 to 'cjson.encode_keep_buffer' (found too many arguments)" } },
     { "Set encode_max_depth(\"wrong\") [throw error]",
       json.encode_max_depth, { "wrong" },
-      false, { "bad argument #1 to '?' (number expected, got string)" } },
+      false, { "bad argument #1 to 'cjson.encode_max_depth' (number expected, got string)" } },
     { "Set decode_max_depth(0) [throw error]",
       json.decode_max_depth, { "0" },
-      false, { "bad argument #1 to '?' (expected integer between 1 and 2147483647)" } },
+      false, { "bad argument #1 to 'cjson.decode_max_depth' (expected integer between 1 and 2147483647)" } },
     { "Set encode_invalid_numbers(-2) [throw error]",
       json.encode_invalid_numbers, { -2 },
-      false, { "bad argument #1 to '?' (invalid option '-2')" } },
+      false, { "bad argument #1 to 'cjson.encode_invalid_numbers' (invalid option '-2')" } },
     { "Set decode_invalid_numbers(true, false) [throw error]",
       json.decode_invalid_numbers, { true, false },
-      false, { "bad argument #2 to '?' (found too many arguments)" } },
+      false, { "bad argument #2 to 'cjson.decode_invalid_numbers' (found too many arguments)" } },
     { "Set encode_sparse_array(\"not quite on\") [throw error]",
       json.encode_sparse_array, { "not quite on" },
-      false, { "bad argument #1 to '?' (invalid option 'not quite on')" } },
+      false, { "bad argument #1 to 'cjson.encode_sparse_array' (invalid option 'not quite on')" } },
 
     { "Reset Lua CJSON configuration", function () json = json.new() end },
     -- Wrap in a function to ensure the table returned by json.new() is used
@@ -394,7 +394,7 @@ local cjson_tests = {
       true, { "true" } },
     { "Encode (safe) argument validation [throw error]",
       json_safe.encode, { "arg1", "arg2" },
-      false, { "bad argument #1 to '?' (expected 1 argument)" } },
+      false, { "bad argument #1 to 'cjson.safe.encode' (expected 1 argument)" } },
     { "Decode (safe) error generation",
       json_safe.decode, { "Oops" },
       true, { nil, "Expected value but found invalid token at character 1" } },
-- 
2.49.0

